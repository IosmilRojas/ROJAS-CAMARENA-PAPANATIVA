<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><%= titulo %></title>
    
    <!-- Bootstrap CSS -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    
    <!-- Font Awesome -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    
    <!-- Custom CSS -->
    <style>
        .camera-container {
            position: relative;
            background: #000;
            border-radius: 8px;
            overflow: hidden;
        }
        
        .camera-video {
            width: 100%;
            height: 300px;
            object-fit: cover;
        }
        
        .camera-overlay {
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            color: white;
            text-align: center;
            z-index: 10;
        }
        
        .capture-area {
            position: relative;
            border: 3px dashed #28a745;
            border-radius: 8px;
            padding: 20px;
            text-align: center;
            background: #f8f9fa;
            transition: all 0.3s ease;
        }
        
        .capture-area.active {
            border-color: #20c997;
            background: #e8f5e9;
        }
        
        .file-upload-container {
            border: 2px dashed #dee2e6;
            border-radius: 8px;
            padding: 30px;
            text-align: center;
            cursor: pointer;
            transition: all 0.3s ease;
        }
        
        .file-upload-container:hover {
            border-color: #28a745;
            background: rgba(40, 167, 69, 0.05);
        }
        
        .file-upload-container.drag-over {
            border-color: #28a745;
            background: rgba(40, 167, 69, 0.1);
        }
        
        .method-tabs {
            background: white;
            border-radius: 8px;
            padding: 5px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        }
        
        .method-tab {
            border: none;
            background: transparent;
            padding: 12px 24px;
            border-radius: 6px;
            transition: all 0.3s ease;
            color: #6c757d;
            font-weight: 500;
        }
        
        .method-tab.active {
            background: #28a745;
            color: white;
        }
        
        .result-card {
            border-radius: 12px;
            overflow: hidden;
            box-shadow: 0 4px 15px rgba(0,0,0,0.1);
        }
        
        .variety-badge {
            font-size: 1.2rem;
            padding: 12px 24px;
            border-radius: 25px;
        }
        
        .confidence-bar {
            height: 8px;
            border-radius: 4px;
            background: #e9ecef;
            overflow: hidden;
        }
        
        .confidence-fill {
            height: 100%;
            transition: width 0.8s ease;
        }
        
        .variety-info {
            background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%);
            border-radius: 8px;
            padding: 20px;
        }
        
        .btn-camera {
            background: linear-gradient(135deg, #28a745 0%, #20c997 100%);
            border: none;
            color: white;
            padding: 12px 24px;
            border-radius: 8px;
            font-weight: 600;
            transition: all 0.3s ease;
        }
        
        .btn-camera:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 15px rgba(40, 167, 69, 0.3);
        }
        
        .loading-overlay {
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: rgba(255,255,255,0.9);
            display: flex;
            align-items: center;
            justify-content: center;
            z-index: 1000;
            border-radius: 8px;
        }
        
        @media (max-width: 768px) {
            .camera-video {
                height: 250px;
            }
        }
    </style>
</head>
<body class="bg-light">
    <!-- Navbar -->
    <%- include('partials/navbar') %>
    
    <div class="container mt-4">
        <!-- Header -->
        <div class="row mb-4">
            <div class="col-12">
                <div class="d-flex justify-content-between align-items-center">
                    <h2 class="text-dark">
                        <i class="fas fa-camera text-success me-2"></i>
                        Clasificar Variedad de Papa
                    </h2>
                    
                    <!-- Model Status Badge -->
                    <div class="model-status">
                        <span class="badge <%= infoModelo.cargado ? 'bg-success' : 'bg-danger' %> fs-6">
                            <i class="fas fa-brain me-1"></i>
                            Modelo IA: <%= infoModelo.cargado ? 'Disponible' : 'No Disponible' %>
                        </span>
                    </div>
                </div>
                
                <!-- Info Alert -->
                <div class="alert alert-info border-0 mt-3">
                    <i class="fas fa-info-circle me-2"></i>
                    <strong>Variedades detectables:</strong> 
                    <span class="badge bg-warning text-dark me-1">Amarilla</span>
                    <span class="badge bg-primary me-1">Huayro</span>
                    <span class="badge bg-success">Peruanita</span>
                </div>
            </div>
        </div>
        
        <!-- Error/Success Messages -->
        <% if (error) { %>
            <div class="alert alert-danger alert-dismissible fade show" role="alert">
                <i class="fas fa-exclamation-triangle me-2"></i>
                <%= error %>
                <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
            </div>
        <% } %>
        
        <div class="row">
            <!-- Input Methods -->
            <div class="col-lg-7 mb-4">
                <div class="card border-0 shadow-sm">
                    <div class="card-body p-4">
                        <!-- Method Selection Tabs -->
                        <div class="method-tabs mb-4">
                            <div class="d-flex">
                                <button class="method-tab active flex-fill" id="cameraTab" onclick="switchMethod('camera')">
                                    <i class="fas fa-video me-2"></i>
                                    Cámara
                                </button>
                                <button class="method-tab flex-fill" id="uploadTab" onclick="switchMethod('upload')">
                                    <i class="fas fa-upload me-2"></i>
                                    Subir Archivo
                                </button>
                            </div>
                        </div>
                        
                        <!-- Camera Method -->
                        <div id="cameraMethod" class="capture-method">
                            <div class="capture-area" id="captureArea">
                                <div class="camera-container" id="cameraContainer" style="display: none;">
                                    <video id="cameraVideo" class="camera-video" autoplay playsinline></video>
                                    <canvas id="captureCanvas" style="display: none;"></canvas>
                                </div>
                                
                                <div id="cameraPrompt" class="text-center py-4">
                                    <i class="fas fa-camera fa-4x text-success mb-3"></i>
                                    <h5 class="mb-3">Capturar desde Cámara</h5>
                                    <p class="text-muted mb-4">
                                        Permite el acceso a tu cámara para tomar una foto de la papa
                                    </p>
                                    <button class="btn btn-camera btn-lg" onclick="startCamera()">
                                        <i class="fas fa-video me-2"></i>
                                        Activar Cámara
                                    </button>
                                </div>
                                
                                <div id="cameraControls" style="display: none;" class="text-center mt-3">
                                    <button class="btn btn-success btn-lg me-2" onclick="capturePhoto()">
                                        <i class="fas fa-camera me-2"></i>
                                        Capturar Foto
                                    </button>
                                    <button class="btn btn-outline-secondary" onclick="stopCamera()">
                                        <i class="fas fa-stop me-2"></i>
                                        Detener Cámara
                                    </button>
                                </div>
                            </div>
                        </div>
                        
                        <!-- Upload Method -->
                        <div id="uploadMethod" class="capture-method" style="display: none;">
                            <form id="uploadForm" enctype="multipart/form-data">
                                <div class="file-upload-container" 
                                     ondrop="handleDrop(event)" 
                                     ondragover="handleDragOver(event)" 
                                     ondragleave="handleDragLeave(event)"
                                     onclick="document.getElementById('fileInput').click()">
                                    
                                    <input type="file" 
                                           id="fileInput" 
                                           name="imagen" 
                                           accept="image/*" 
                                           class="d-none"
                                           onchange="handleFileSelect(event)">
                                    
                                    <i class="fas fa-cloud-upload-alt fa-4x text-muted mb-3"></i>
                                    <h5 class="mb-3">Subir Imagen</h5>
                                    <p class="text-muted mb-2">
                                        Haz clic aquí o arrastra una imagen
                                    </p>
                                    <small class="text-muted">
                                        Formatos: JPG, PNG, WebP (máx. 10MB)
                                    </small>
                                </div>
                            </form>
                        </div>
                        
                        <!-- Image Preview -->
                        <div id="imagePreview" style="display: none;" class="mt-4">
                            <div class="card border-0">
                                <div class="card-header bg-light">
                                    <h6 class="mb-0">
                                        <i class="fas fa-eye me-2"></i>
                                        Vista Previa
                                    </h6>
                                </div>
                                <div class="card-body">
                                    <img id="previewImage" class="img-fluid rounded" style="max-height: 300px; width: auto; display: block; margin: 0 auto;">
                                    <div class="mt-3 text-center">
                                        <small class="text-muted" id="imageInfo"></small>
                                    </div>
                                </div>
                            </div>
                            
                            <!-- Classify Button -->
                            <div class="d-grid gap-2 mt-3">
                                <button class="btn btn-success btn-lg" 
                                        id="classifyBtn" 
                                        onclick="classifyImage()"
                                        <%= !infoModelo.cargado ? 'disabled' : '' %>>
                                    <i class="fas fa-brain me-2"></i>
                                    Clasificar con IA
                                </button>
                                
                                <% if (!infoModelo.cargado) { %>
                                    <small class="text-danger text-center">
                                        <i class="fas fa-exclamation-circle me-1"></i>
                                        El modelo IA no está disponible
                                    </small>
                                <% } %>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            
            <!-- Results Section -->
            <div class="col-lg-5 mb-4">
                <div class="card border-0 shadow-sm">
                    <div class="card-header bg-white border-bottom-0">
                        <h5 class="mb-0">
                            <i class="fas fa-search me-2 text-info"></i>
                            Resultado de Clasificación
                        </h5>
                    </div>
                    <div class="card-body">
                        <div id="resultContainer">
                            <div class="text-center text-muted py-5">
                                <i class="fas fa-seedling fa-4x opacity-25 mb-3"></i>
                                <h6 class="text-muted">¿Qué variedad es?</h6>
                                <p class="mb-0 small">
                                    Captura o sube una imagen para descubrirlo
                                </p>
                            </div>
                        </div>
                        
                        <!-- Loading State -->
                        <div id="loadingResult" style="display: none;">
                            <div class="loading-overlay">
                                <div class="text-center">
                                    <div class="spinner-border text-success mb-3" role="status">
                                        <span class="visually-hidden">Analizando...</span>
                                    </div>
                                    <p class="text-muted mb-0">
                                        <i class="fas fa-brain me-1"></i>
                                        Analizando con IA...
                                    </p>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                
                <!-- Variety Information -->
                <div class="card border-0 shadow-sm mt-4">
                    <div class="card-body">
                        <h6 class="text-dark mb-3">
                            <i class="fas fa-info-circle me-2 text-primary"></i>
                            Variedades Nativas del Perú
                        </h6>
                        
                        <div class="variety-info mb-3">
                            <div class="d-flex align-items-center mb-2">
                                <span class="badge bg-warning text-dark me-2">Amarilla</span>
                                <small class="text-muted">Papa criolla tradicional</small>
                            </div>
                            <div class="d-flex align-items-center mb-2">
                                <span class="badge bg-primary me-2">Huayro</span>
                                <small class="text-muted">Variedad andina resistente</small>
                            </div>
                            <div class="d-flex align-items-center">
                                <span class="badge bg-success me-2">Peruanita</span>
                                <small class="text-muted">Papa nativa pequeña</small>
                            </div>
                        </div>
                        
                        <small class="text-muted">
                            <i class="fas fa-lightbulb me-1"></i>
                            Asegúrate de que la imagen sea clara y bien iluminada para mejores resultados.
                        </small>
                    </div>
                </div>
            </div>
        </div>
    </div>
    
    <!-- Bootstrap JS -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    
    <!-- TensorFlow.js -->
    <script src="https://cdn.jsdelivr.net/npm/@tensorflow/tfjs@latest/dist/tf.min.js"></script>
    
    <script>
        let mediaStream = null;
        let currentImageData = null;
        let modeloTensorFlow = null;
        let modeloCargado = false;
        const CLASES = ['amarilla', 'huayro', 'peruanita'];
        const MODEL_URL = '/web_model/model.json';
        
        // Cargar modelo TensorFlow.js en el frontend
        async function cargarModeloTensorFlow() {
            try {
                console.log('🧠 Cargando modelo TensorFlow.js...');
                
                // Mostrar indicador de carga
                updateModelStatus('Cargando modelo IA...', 'warning');
                
                modeloTensorFlow = await tf.loadLayersModel(MODEL_URL);
                modeloCargado = true;
                
                console.log('✅ Modelo TensorFlow cargado exitosamente');
                console.log('📊 Clases:', CLASES);
                
                updateModelStatus('Modelo IA Real Cargado', 'success');
                
                return true;
                
            } catch (error) {
                console.error('❌ Error cargando modelo TensorFlow:', error);
                updateModelStatus('Usando Simulación IA', 'warning');
                return false;
            }
        }
        
        // Actualizar estado del modelo en la UI
        function updateModelStatus(texto, tipo) {
            const badge = document.querySelector('.model-status .badge');
            if (badge) {
                badge.textContent = `🧠 ${texto}`;
                badge.className = `badge bg-${tipo} fs-6`;
            }
        }
        
        // Clasificar imagen con TensorFlow.js en el frontend
        async function clasificarConTensorFlow(imageElement) {
            if (!modeloCargado || !modeloTensorFlow) {
                throw new Error('Modelo TensorFlow no disponible');
            }
            
            try {
                console.log('🔮 Clasificando con TensorFlow.js...');
                
                // Preprocesar imagen
                const tensor = tf.browser.fromPixels(imageElement)
                    .resizeNearestNeighbor([224, 224]) // Redimensionar a 224x224
                    .toFloat()
                    .div(tf.scalar(255.0)) // Normalizar 0-1
                    .expandDims(); // Agregar dimensión de batch
                
                console.log('📊 Tensor shape:', tensor.shape);
                
                // Realizar predicción
                const prediccion = modeloTensorFlow.predict(tensor);
                const probabilidades = await prediccion.data();
                
                // Limpiar memoria
                tensor.dispose();
                prediccion.dispose();
                
                // Procesar resultados
                const resultados = Array.from(probabilidades);
                const indiceMaximo = resultados.indexOf(Math.max(...resultados));
                const confianzaMaxima = resultados[indiceMaximo];
                
                console.log('📈 Probabilidades:', resultados);
                console.log('🎯 Predicción:', CLASES[indiceMaximo], `(${Math.round(confianzaMaxima * 100)}%)`);
                
                return {
                    prediccion: CLASES[indiceMaximo],
                    confianza: confianzaMaxima,
                    probabilidades: resultados.map((prob, index) => ({
                        variedad: CLASES[index],
                        probabilidad: prob,
                        porcentaje: Math.round(prob * 100)
                    })).sort((a, b) => b.probabilidad - a.probabilidad)
                };
                
            } catch (error) {
                console.error('❌ Error en clasificación TensorFlow:', error);
                throw error;
            }
        }
        
        // Switch between camera and upload methods
        function switchMethod(method) {
            // Update tabs
            document.querySelectorAll('.method-tab').forEach(tab => {
                tab.classList.remove('active');
            });
            document.getElementById(method + 'Tab').classList.add('active');
            
            // Update content
            document.querySelectorAll('.capture-method').forEach(content => {
                content.style.display = 'none';
            });
            document.getElementById(method + 'Method').style.display = 'block';
            
            // Stop camera if switching away from it
            if (method !== 'camera') {
                stopCamera();
            }
            
            // Clear preview if switching methods
            hidePreview();
        }
        
        // Start camera
        async function startCamera() {
            try {
                const constraints = {
                    video: {
                        width: { ideal: 1280 },
                        height: { ideal: 720 },
                        facingMode: 'environment' // Use rear camera on mobile if available
                    }
                };
                
                mediaStream = await navigator.mediaDevices.getUserMedia(constraints);
                const video = document.getElementById('cameraVideo');
                video.srcObject = mediaStream;
                
                // Show camera interface
                document.getElementById('cameraPrompt').style.display = 'none';
                document.getElementById('cameraContainer').style.display = 'block';
                document.getElementById('cameraControls').style.display = 'block';
                document.getElementById('captureArea').classList.add('active');
                
            } catch (error) {
                console.error('Error accessing camera:', error);
                alert('No se pudo acceder a la cámara. Verifica los permisos o usa la opción de subir archivo.');
            }
        }
        
        // Stop camera
        function stopCamera() {
            if (mediaStream) {
                mediaStream.getTracks().forEach(track => track.stop());
                mediaStream = null;
            }
            
            document.getElementById('cameraPrompt').style.display = 'block';
            document.getElementById('cameraContainer').style.display = 'none';
            document.getElementById('cameraControls').style.display = 'none';
            document.getElementById('captureArea').classList.remove('active');
        }
        
        // Capture photo from camera
        function capturePhoto() {
            const video = document.getElementById('cameraVideo');
            const canvas = document.getElementById('captureCanvas');
            const context = canvas.getContext('2d');
            
            // Set canvas size to video size
            canvas.width = video.videoWidth;
            canvas.height = video.videoHeight;
            
            // Draw video frame to canvas
            context.drawImage(video, 0, 0);
            
            // Convert to blob
            canvas.toBlob((blob) => {
                const file = new File([blob], 'camera-capture.jpg', { type: 'image/jpeg' });
                displayPreview(file, URL.createObjectURL(blob));
                currentImageData = file;
            }, 'image/jpeg', 0.8);
            
            // Stop camera after capture
            stopCamera();
        }
        
        // Handle file selection
        function handleFileSelect(event) {
            console.log('📁 Archivo seleccionado desde input');
            const file = event.target.files[0];
            if (file) {
                console.log('✅ Archivo válido:', file.name, file.size, 'bytes');
                displayPreview(file, URL.createObjectURL(file));
                currentImageData = file;
                console.log('💾 currentImageData asignado:', currentImageData.name);
            } else {
                console.log('❌ No se seleccionó ningún archivo');
            }
        }
        
        // Handle drag and drop
        function handleDragOver(event) {
            event.preventDefault();
            event.currentTarget.classList.add('drag-over');
        }
        
        function handleDragLeave(event) {
            event.currentTarget.classList.remove('drag-over');
        }
        
        function handleDrop(event) {
            console.log('🎯 Archivo arrastrado y soltado');
            event.preventDefault();
            event.currentTarget.classList.remove('drag-over');
            
            const files = event.dataTransfer.files;
            if (files.length > 0) {
                const file = files[0];
                console.log('📁 Archivo recibido:', file.name, file.type);
                if (file.type.startsWith('image/')) {
                    console.log('✅ Es una imagen válida');
                    displayPreview(file, URL.createObjectURL(file));
                    currentImageData = file;
                    console.log('💾 currentImageData asignado:', currentImageData.name);
                } else {
                    console.log('❌ No es una imagen válida');
                }
            }
        }
        
        // Display image preview
        function displayPreview(file, url) {
            document.getElementById('previewImage').src = url;
            document.getElementById('imageInfo').textContent = `${file.name} (${(file.size / 1024 / 1024).toFixed(2)} MB)`;
            document.getElementById('imagePreview').style.display = 'block';
            
            // Clear previous results
            document.getElementById('resultContainer').innerHTML = `
                <div class="text-center text-muted py-5">
                    <i class="fas fa-seedling fa-4x opacity-25 mb-3"></i>
                    <h6 class="text-muted">Lista para clasificar</h6>
                    <p class="mb-0 small">
                        Presiona el botón "Clasificar con IA"
                    </p>
                </div>
            `;
        }
        
        // Hide preview
        function hidePreview() {
            document.getElementById('imagePreview').style.display = 'none';
            currentImageData = null;
            
            // Reset file input
            document.getElementById('fileInput').value = '';
        }
        
        // Classify image
        async function classifyImage() {
            if (!currentImageData) {
                alert('Por favor selecciona o captura una imagen primero.');
                return;
            }
            
            // Show loading state
            document.getElementById('loadingResult').style.display = 'block';
            document.getElementById('resultContainer').style.display = 'none';
            
            try {
                let result = null;
                
                // SIEMPRE usar backend para garantizar que se guarden los datos en BD
                console.log('💾 Usando backend para clasificación y guardado en BD...');
                result = await clasificarConBackend();
                
                // Hide loading state
                document.getElementById('loadingResult').style.display = 'none';
                document.getElementById('resultContainer').style.display = 'block';
                
                if (result && result.prediccion) {
                    displayResult(result);
                } else {
                    displayError('Error en la clasificación');
                }
                
            } catch (error) {
                console.error('Error:', error);
                document.getElementById('loadingResult').style.display = 'none';
                document.getElementById('resultContainer').style.display = 'block';
                displayError('Error de conexión. Intenta nuevamente.');
            }
        }
        
        // Clasificar usando el backend
        async function clasificarConBackend() {
            console.log('🚀 Iniciando clasificación con backend...');
            console.log('📁 Datos de imagen:', currentImageData);
            console.log('📏 Tamaño de imagen:', currentImageData ? currentImageData.size : 'No hay imagen');
            
            if (!currentImageData) {
                console.error('❌ No hay imagen para procesar');
                throw new Error('No se ha seleccionado ninguna imagen');
            }
            
            const formData = new FormData();
            formData.append('imagen', currentImageData);
            
            console.log('📤 Enviando petición a /clasificacion/procesar...');
            
            const response = await fetch('/clasificacion/procesar', {
                method: 'POST',
                body: formData
            });
            
            console.log('📨 Respuesta recibida:', response.status, response.statusText);
            
            const result = await response.json();
            console.log('📋 Contenido de respuesta:', result);
            
            if (response.ok && result.exito && result.resultado) {
                // Adaptar la respuesta del backend al formato esperado por el frontend
                return {
                    prediccion: result.resultado.variedad.nombre,
                    confianza: result.resultado.confianza,
                    confianzaPorcentaje: result.resultado.confianzaPorcentaje,
                    condicion: result.resultado.condicion,
                    metodo: 'Backend IA',
                    probabilidades: result.resultado.alternativas ? 
                        [
                            { variedad: result.resultado.variedad.nombre, porcentaje: result.resultado.confianzaPorcentaje },
                            ...result.resultado.alternativas.map(alt => ({
                                variedad: alt.variedad || 'Desconocida',
                                porcentaje: Math.round((alt.confianza || 0) * 100)
                            }))
                        ] : []
                };
            } else {
                throw new Error(result.error || 'Error en clasificación backend');
            }
        }
        
        // Display classification result
        function displayResult(result) {
            const confidence = Math.round(result.confianza * 100);
            const variety = result.prediccion;
            const metodo = result.metodo || 'Desconocido';
            const condicion = result.condicion || (confidence >= 70 ? 'apto' : 'no apto');
            
            // Get variety info
            const varietyInfo = {
                'amarilla': { color: 'warning', icon: '🟨', name: 'Amarilla', desc: 'Papa criolla tradicional' },
                'huayro': { color: 'primary', icon: '🔵', name: 'Huayro', desc: 'Variedad andina resistente' },
                'peruanita': { color: 'success', icon: '🟢', name: 'Peruanita', desc: 'Papa nativa pequeña' }
            };
            
            const info = varietyInfo[variety.toLowerCase()] || { color: 'secondary', icon: '⚪', name: variety, desc: 'Variedad desconocida' };
            
            // Generar lista de todas las probabilidades si están disponibles
            let probabilidadesHTML = '';
            if (result.probabilidades && Array.isArray(result.probabilidades)) {
                probabilidadesHTML = `
                    <div class="mt-3">
                        <h6 class="mb-2">
                            <i class="fas fa-chart-bar me-2 text-info"></i>
                            Todas las Probabilidades
                        </h6>
                        ${result.probabilidades.map(p => `
                            <div class="d-flex justify-content-between align-items-center mb-1">
                                <small>${p.variedad}</small>
                                <small><strong>${p.porcentaje}%</strong></small>
                            </div>
                        `).join('')}
                    </div>
                `;
            }
            
            const metodoBadge = metodo.includes('TensorFlow') ? 
                '<span class="badge bg-success ms-2"><i class="fas fa-brain me-1"></i>IA Real</span>' : 
                '<span class="badge bg-info ms-2"><i class="fas fa-cog me-1"></i>Simulado</span>';
            
            const isApto = condicion.toLowerCase() === 'apto';
            
            document.getElementById('resultContainer').innerHTML = `
                <div class="result-card border-0">
                    <div class="text-center mb-4">
                        <div class="variety-badge badge bg-${info.color} mb-3">
                            ${info.icon} ${info.name}
                        </div>
                        <h4 class="text-success mb-2">${confidence}% de confianza</h4>
                        <div class="confidence-bar mb-3">
                            <div class="confidence-fill bg-${info.color}" style="width: ${confidence}%"></div>
                        </div>
                        <small class="text-muted">${info.desc}</small>
                    </div>
                    
                    <div class="bg-light rounded p-3 mb-3">
                        <h6 class="mb-2">
                            <i class="fas fa-info-circle me-2 text-primary"></i>
                            Detalles del Análisis
                        </h6>
                        <small class="text-muted">
                            <strong>Variedad detectada:</strong> ${info.name}<br>
                            <strong>Nivel de confianza:</strong> ${confidence}%<br>
                            <strong>Condición:</strong> <span class="badge ${isApto ? 'bg-success' : 'bg-warning text-dark'}">
                                ${isApto ? '✓ Apto' : '⚠ No Apto'}
                            </span><br>
                            <strong>Estado:</strong> ${confidence >= 80 ? 'Alta confianza' : confidence >= 60 ? 'Confianza media' : 'Baja confianza'}<br>
                            <strong>Método:</strong> ${metodo} ${metodoBadge}
                        </small>
                        ${probabilidadesHTML}
                    </div>
                    
                    <div class="d-grid">
                        <button class="btn btn-outline-primary" onclick="newClassification()">
                            <i class="fas fa-redo me-2"></i>
                            Nueva Clasificación
                        </button>
                    </div>
                </div>
            `;
        }
        
        // Display error
        function displayError(message) {
            document.getElementById('resultContainer').innerHTML = `
                <div class="alert alert-danger border-0">
                    <i class="fas fa-exclamation-triangle me-2"></i>
                    <strong>Error:</strong> ${message}
                </div>
                <div class="d-grid">
                    <button class="btn btn-outline-secondary" onclick="newClassification()">
                        <i class="fas fa-redo me-2"></i>
                        Intentar Nuevamente
                    </button>
                </div>
            `;
        }
        
        // Start new classification
        function newClassification() {
            hidePreview();
            document.getElementById('resultContainer').innerHTML = `
                <div class="text-center text-muted py-5">
                    <i class="fas fa-seedling fa-4x opacity-25 mb-3"></i>
                    <h6 class="text-muted">¿Qué variedad es?</h6>
                    <p class="mb-0 small">
                        Captura o sube una imagen para descubrirlo
                    </p>
                </div>
            `;
        }
        
        // Initialize on page load
        document.addEventListener('DOMContentLoaded', function() {
            // Check if camera is supported
            if (!navigator.mediaDevices || !navigator.mediaDevices.getUserMedia) {
                // If camera not supported, switch to upload method
                switchMethod('upload');
                document.getElementById('cameraTab').style.display = 'none';
            }
            
            // Intentar cargar el modelo TensorFlow.js
            console.log('🚀 Inicializando aplicación...');
            cargarModeloTensorFlow().then(success => {
                if (success) {
                    console.log('🎉 Modelo TensorFlow listo para usar!');
                } else {
                    console.log('⚠️ Usando modo simulado como alternativa');
                }
            }).catch(error => {
                console.error('❌ Error inicializando modelo:', error);
            });
        });
    </script>
</body>
</html>