// Configuraci√≥n y conexi√≥n a MongoDB Atlas
const mongoose = require('mongoose');
require('dotenv').config();

const connectDB = async () => {
    try {
        // Validar URI de MongoDB Atlas
        let mongoURI = process.env.MONGODB_URI;
        let connectionType = 'Atlas';
        
        // Verificar si es una URI v√°lida de Atlas
        if (!mongoURI || 
            mongoURI.includes('username:password') || 
            mongoURI.includes('xxxxx') ||
            mongoURI.includes('TU_PASSWORD') ||
            mongoURI.includes('tu_password')) {
            console.log('‚ö†Ô∏è  URI de MongoDB Atlas no configurada o contiene placeholder');
            console.log('üîß Por favor configura la contrase√±a real en el archivo .env');
            console.log('üîÑ Usando MongoDB Local como alternativa...');
            mongoURI = process.env.MONGODB_LOCAL || 'mongodb://localhost:27017/PapasDB';
            connectionType = 'Local';
        }
        
        console.log(`üîó Conectando a MongoDB ${connectionType}...`);
        console.log(`üìç URI: ${mongoURI.replace(/\/\/.*:.*@/, '//***:***@')}`); // Ocultar credenciales
        
        const conn = await mongoose.connect(mongoURI, {
            serverSelectionTimeoutMS: 10000, // 10 segundos para Atlas
            socketTimeoutMS: 45000,
            maxPoolSize: 10,
            retryWrites: true,
        });

        console.log(`‚úÖ MongoDB ${connectionType} conectado exitosamente!`);
        console.log(`üè† Host: ${conn.connection.host}`);
        console.log(`üìä Base de datos: ${conn.connection.name}`);
        console.log(`üîå Estado: ${conn.connection.readyState === 1 ? 'Conectado' : 'Desconectado'}`);
        
        return conn;
        
    } catch (error) {
        console.error('‚ùå Error conectando a MongoDB Atlas:', error.message);
        
        // Intentar conexi√≥n local como fallback solo si no estaba ya usando local
        if (!process.env.MONGODB_URI || process.env.MONGODB_URI.includes('mongodb+srv://')) {
            console.log('üîÑ Intentando conexi√≥n local de respaldo...');
            
            try {
                const localURI = 'mongodb://localhost:27017/PapasDB';
                const conn = await mongoose.connect(localURI, {
                    serverSelectionTimeoutMS: 3000,
                });
                
                console.log(`‚úÖ Conectado a MongoDB Local: ${conn.connection.host}`);
                console.log(`üìä Base de datos: ${conn.connection.name}`);
                return conn;
                
            } catch (fallbackError) {
                console.error('‚ùå Error en conexi√≥n local de respaldo:', fallbackError.message);
            }
        }
        
        // Mostrar gu√≠a de configuraci√≥n
        console.log('\nÔøΩ GU√çA DE CONFIGURACI√ìN:');
        console.log('‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ');
        console.log('1Ô∏è‚É£  Para MongoDB Atlas:');
        console.log('   ‚Ä¢ Ve a https://cloud.mongodb.com');
        console.log('   ‚Ä¢ Crea un cluster (gratis)');
        console.log('   ‚Ä¢ Copia la cadena de conexi√≥n');
        console.log('   ‚Ä¢ Actualiza MONGODB_URI en .env');
        console.log('');
        console.log('2Ô∏è‚É£  Para MongoDB Local:');
        console.log('   ‚Ä¢ Instala: https://www.mongodb.com/try/download/community');
        console.log('   ‚Ä¢ O usa Docker: docker run -d -p 27017:27017 --name mongodb mongo');
        console.log('');
        console.log('3Ô∏è‚É£  Formato de URI Atlas:');
        console.log('   mongodb+srv://usuario:password@cluster0.xxxxx.mongodb.net/PapasDB');
        console.log('‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ');
        
        // Continuar sin BD para permitir desarrollo del frontend
        console.log('‚ö†Ô∏è  Continuando sin base de datos - Solo funcionalidad frontend disponible');
        return null;
    }
};

// Manejo de eventos de conexi√≥n
mongoose.connection.on('connected', () => {
    console.log('üü¢ Mongoose conectado exitosamente');
});

mongoose.connection.on('error', (err) => {
    console.error('üî¥ Error de conexi√≥n MongoDB:', err.message);
});

mongoose.connection.on('disconnected', () => {
    console.log('üü° Mongoose desconectado de MongoDB');
});

// Cerrar conexi√≥n cuando la aplicaci√≥n termine
process.on('SIGINT', async () => {
    await mongoose.connection.close();
    console.log('Conexi√≥n MongoDB cerrada por terminaci√≥n de aplicaci√≥n');
    process.exit(0);
});

module.exports = connectDB;